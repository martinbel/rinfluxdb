{
    "collab_server" : "",
    "contents" : "# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Cmd + Shift + B'\n#   Check Package:             'Cmd + Shift + E'\n#   Test Package:              'Cmd + Shift + T'\n\n\n#' @export\n#' @param response (httr::GET output)\n#' @param return_datatable (bool)\n#' @return a data.frame or data.table\nparse_response <- function(response, return_datatable=TRUE){\n  res = content(response)[[1]][[1]][[2]]\n  cols = unlist(res[[1]]$columns)\n  dt = rbindlist(res[[1]]$values)\n  setnames(dt, names(dt), cols)\n  if(return_datatable){\n    return(dt)\n  } else {\n    return(as.data.frame(dt))\n  }\n}\n\n\n#' @export\n#' @param con (list) Should include scheme, host, port\n#' @param args (list) HTTP arguments in list format, at least include db, query\n#' @param return_datatable (boolean) How should the data be returned, by default it returns a data.table\n#' @return data.table or data.frame from query\ndbGetQuery <- function(con,\n                       args,\n                       return_datatable=TRUE\n                       ) {\n\n\n  make_url = sprintf(\"%s://%s:%s/query?\",\n                     scheme=con[['scheme']], host=con[['host']], port=con[['port']])\n\n  response <- GET(\n    make_url,\n    query = args\n  )\n\n  if (response$status_code < 200 || response$status_code >= 300) {\n    if (length(response$content) > 0)\n      warning(rawToChar(response$content))\n    stop(\"Influx query failed with HTTP status code \", response$status_code)\n  } else {\n    DT = try(parse_response(response, return_datatable=return_datatable), silent=TRUE)\n    if(class(DT) != 'try-error'){\n      return(DT)\n    } else {\n      return(response)\n    }\n  }\n\n}\n",
    "created" : 1496949700436.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2000106942",
    "id" : "DB138BFA",
    "lastKnownWriteTime" : 1496951473,
    "last_content_update" : 1496951473121,
    "path" : "~/Desktop/dm/freelance/pedro/dev/iot/rinfluxdb/R/rinfluxfb.R",
    "project_path" : "R/rinfluxfb.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}